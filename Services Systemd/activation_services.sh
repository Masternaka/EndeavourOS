#!/bin/bash
set -euo pipefail

###############################################################################
# Script de modification activation des services et timers
#
# Utilisation:
# 1. Sauvegardez ce script sous un nom, par exemple: activation_services.sh
# 2. Rendez-le ex√©cutable: chmod +x activation_services.sh
# 3. Ex√©cutez-le: sudo ./activation_services.sh
#
# Fonctionnalit√©s:
# - Activation automatique des services syst√®me essentiels
# - Gestion s√©par√©e des services et timers
# - V√©rification de disponibilit√© avant traitement
# - Compteurs de succ√®s/√©checs
# - Interface color√©e et claire
###############################################################################

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Compteurs
services_success=0
services_failed=0
timers_success=0
timers_failed=0

# Fonctions utilitaires
print_header() {
    echo -e "${CYAN}================================================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}================================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rification des privil√®ges root
if [[ $EUID -ne 0 ]]; then
    print_error "Ce script doit √™tre ex√©cut√© en tant que root (sudo)."
    exit 1
fi

print_header "SCRIPT D'ACTIVATION DES SERVICES ET TIMERS"
print_info "D√©marrage du script..."

# Liste fixe des services √† g√©rer
services=("bluetooth.service" "ufw.service")
timers=("fstrim.timer" "paccache.timer")

# Fonction pour v√©rifier si un service/timer existe
service_exists() {
    systemctl list-unit-files | grep -q "^$1"
}

# Fonction pour traiter un service
process_service() {
    local service=$1
    print_header "Traitement de $service"
    
    if ! service_exists "$service"; then
        print_warning "$service n'existe pas sur ce syst√®me"
        ((services_failed++))
        return 0  # Continue malgr√© l'erreur
    fi
    
    print_info "V√©rification du statut de $service"
    systemctl status "$service" --no-pager
    
    print_info "D√©marrage de $service"
    if systemctl start "$service" 2>/dev/null; then
        print_success "$service d√©marr√© avec succ√®s"
    else
        print_error "Erreur lors du d√©marrage de $service"
        ((services_failed++))
        return 0  # Continue malgr√© l'erreur
    fi
    
    print_info "Activation de $service"
    if systemctl enable "$service" 2>/dev/null; then
        print_success "$service activ√© avec succ√®s"
        ((services_success++))
    else
        print_error "Erreur lors de l'activation de $service"
        ((services_failed++))
        return 0  # Continue malgr√© l'erreur
    fi
}

# Fonction pour traiter un timer
process_timer() {
    local timer=$1
    print_header "Traitement de $timer"
    
    if ! service_exists "$timer"; then
        print_warning "$timer n'existe pas sur ce syst√®me"
        ((timers_failed++))
        return 0  # Continue malgr√© l'erreur
    fi
    
    print_info "V√©rification du statut de $timer"
    systemctl status "$timer" --no-pager
    
    print_info "Activation de $timer"
    if systemctl enable "$timer" 2>/dev/null; then
        print_success "$timer activ√© avec succ√®s"
        ((timers_success++))
    else
        print_error "Erreur lors de l'activation de $timer"
        ((timers_failed++))
        return 0  # Continue malgr√© l'erreur
    fi
}

# Traitement des services
print_header "TRAITEMENT DES SERVICES"
for service in "${services[@]}"; do
    process_service "$service"
    echo
done

# Traitement des timers
print_header "TRAITEMENT DES TIMERS"
for timer in "${timers[@]}"; do
    process_timer "$timer"
    echo
done

# V√©rification finale et r√©sum√©
print_header "V√âRIFICATION FINALE ET R√âSUM√â"

print_info "V√©rification du statut final des services :"
for service in "${services[@]}"; do
    if service_exists "$service"; then
        systemctl is-active "$service" &> /dev/null
        if [ $? -eq 0 ]; then
            print_success "$service : actif"
        else
            print_error "$service : inactif"
        fi
    fi
done

print_info "V√©rification du statut final des timers :"
for timer in "${timers[@]}"; do
    if service_exists "$timer"; then
        systemctl is-enabled "$timer" &> /dev/null
        if [ $? -eq 0 ]; then
            print_success "$timer : activ√©"
        else
            print_error "$timer : non activ√©"
        fi
    fi
done

# R√©sum√© final
print_header "R√âSUM√â FINAL"
echo -e "${PURPLE}Services trait√©s :${NC}"
echo -e "  ${GREEN}Succ√®s : $services_success${NC}"
echo -e "  ${RED}√âchecs : $services_failed${NC}"
echo -e "${PURPLE}Timers trait√©s :${NC}"
echo -e "  ${GREEN}Succ√®s : $timers_success${NC}"
echo -e "  ${RED}√âchecs : $timers_failed${NC}"

total_success=$((services_success + timers_success))
total_failed=$((services_failed + timers_failed))

if [ $total_failed -eq 0 ]; then
    print_success "Tous les services et timers ont √©t√© trait√©s avec succ√®s !"
    echo -e "${GREEN}üéâ Script termin√© avec succ√®s !${NC}"
else
    print_warning "Certains services ou timers ont √©chou√©. V√©rifiez les messages ci-dessus."
    echo -e "${YELLOW}‚ö†Ô∏è  Script termin√© avec des avertissements.${NC}"
fi

print_info "Script termin√© le $(date)"